{"version":3,"sources":["components/Logo.jsx","components/CustomTooltip.jsx","components/Graph.jsx","components/CryptoNavBar.jsx","components/About.jsx","apiCall.js","App.js","serviceWorker.js","index.js"],"names":["Logo","Container","style","marginBottom","Grid","container","justify","item","fontWeight","fontSize","marginTop","Component","CustomTooltip","active","payload","label","Box","color","p","borderRadius","background","value","Graph","graphData","this","props","data","width","height","type","dataKey","stroke","content","CryptoNavBar","handleClick","name","handleCryptoName","spacing","xs","Button","variant","onClick","e","currentTarget","About","position","bottom","href","makeApiCall","axios","process","method","headers","then","res","catch","err","App","state","historicalData","getApiData","apiCall","setState","Data","map","el","date","moment","unix","time","format","price","high","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a805a20c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport TrendingUpIcon from \"@material-ui/icons/TrendingUp\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\nclass Logo extends Component {\r\n  render() {\r\n    return (\r\n      <Container style={{marginBottom: \"20px\"}}>\r\n        <Grid container justify=\"center\">\r\n          <Grid item>\r\n            <h1 style={{ fontWeight: \"300\", fontSize: \"70px\" }}>CryptoIndex <TrendingUpIcon style={{fontSize:\"70px\"}} /></h1>\r\n            <h3 style={{ fontWeight: \"100\",marginTop:\"-10px\"}}>Prices of the most popular cryptocurrencies</h3>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nconst CustomTooltip = ({ active, payload, label }) =>\r\n  active ? (\r\n    // <div\r\n    //   style={{\r\n    //     backgroundColor: \"#ccd5e3\",\r\n    //     background: \"rgba(211,211,211, 0.2)\",\r\n    //     padding: \"10px\",\r\n\r\n    //   }}\r\n    // >\r\n    //   <p>{`date: ${label}`}</p>\r\n    //   <p>{`price: $ ${payload[0].value}`}</p>\r\n    // </div>\r\n    <Box color=\"primary.contrastText\" p={1} borderRadius={8} style={{background: \"rgba(25, 118, 210, 0.5)\"}}>\r\n      <p>{`date: ${label}`}</p>\r\n      <p>{`price: $ ${payload[0].value}`}</p>\r\n    </Box>\r\n  ) : null;\r\n\r\nexport default CustomTooltip;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer\r\n} from \"recharts\";\r\n\r\nimport CustomTooltip from './CustomTooltip'\r\n\r\nexport default class Graph extends Component {\r\n  render() {\r\n    const graphData = this.props.data;\r\n    return (\r\n      <div>\r\n        <ResponsiveContainer width=\"100%\" height={300} >\r\n          <LineChart data={graphData}>\r\n            <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" />\r\n            <CartesianGrid stroke=\"#ccc\" />\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis dataKey=\"price\" />\r\n            <Tooltip content={<CustomTooltip />} />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport  {Container}  from \"@material-ui/core\";\r\n\r\nexport default class CryptoNavBar extends Component {\r\n\r\n  handleClick = (name) => {\r\n      this.props.handleCryptoName(name)\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container style={{marginBottom: \"30px\"}}>\r\n        <Grid container justify=\"center\" spacing={5}>\r\n          <Grid item xs=\"auto\">\r\n            <Button\r\n              name=\"btc\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={e => this.handleClick(e.currentTarget.name)}\r\n            >\r\n              BTC\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs=\"auto\">\r\n            <Button\r\n              name=\"eth\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={e => this.handleClick(e.currentTarget.name)}\r\n            >\r\n              ETH\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs=\"auto\">\r\n            <Button\r\n              name=\"bch\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={e => this.handleClick(e.currentTarget.name)}\r\n            >\r\n              BCH\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs=\"auto\">\r\n            <Button\r\n              name=\"eos\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={e => this.handleClick(e.currentTarget.name)}\r\n            >\r\n              EOS\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs=\"auto\">\r\n            <Button\r\n              name=\"xrp\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={e => this.handleClick(e.currentTarget.name)}\r\n            >\r\n              XRP\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        </Container>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class About extends Component {\r\n  render() {\r\n    return (\r\n      <div style={{ position: \"absolute\", bottom: \"0\", width: \"100%\" }}>\r\n        <h3 style={{ fontWeight: \"100\" }}>\r\n          Made by <a href=\"https://github.com/SzklaneDomy\">@SzklaneDomy</a>\r\n        </h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport const makeApiCall = payload => {\r\n  const apiKey = process.env.REACT_APP_CRYPTOCOMPARE_KEY\r\n  return axios(\r\n    `https://min-api.cryptocompare.com/data/v2/histoday?api_key=${apiKey}&fsym=${payload}&tsym=USD&limit=30`\r\n  , {\r\n      method: 'GET',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n      data: payload,\r\n  })\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      throw err;\r\n    });\r\n};\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport moment from \"moment\";\n\nimport Logo from \"./components/Logo\";\nimport Graph from \"./components/Graph\";\nimport CryptoNavBar from \"./components/CryptoNavBar\";\nimport About from \"./components/About\";\n\nimport * as apiCall from \"./apiCall\";\n\nclass App extends Component {\n  state = {\n    historicalData: null,\n    graphData: null\n  };\n\n  getApiData = name => {\n    apiCall\n      .makeApiCall(name)\n      .then(res => {\n        this.setState({\n          historicalData: res.Data.Data\n        });\n      })\n      .then(() => {\n        const data = this.state.historicalData.map(el => {\n          return {\n            date: moment.unix(el.time).format(\"MM/DD/YYYY\"),\n            price: el.high\n          };\n        });\n        this.setState({ graphData: data });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Logo />\n        <CryptoNavBar handleCryptoName={this.getApiData} />\n        {this.state.graphData ? <Graph data={this.state.graphData} /> : null}\n        <About />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}