{"version":3,"sources":["components/Logo.jsx","components/CustomTooltip.jsx","components/CustomizedAxisTick.jsx","components/Graph.jsx","components/CryptoNavBar.jsx","components/About.jsx","apiCall.js","App.js","serviceWorker.js","index.js"],"names":["Logo","Grid","container","justify","item","style","fontWeight","fontSize","marginTop","Component","CustomTooltip","active","payload","label","Box","color","p","borderRadius","background","value","CustomizedAxisTick","rest","verticalAnchor","visibleTicksCount","className","dy","Graph","graphData","this","props","data","GridList","cellHeight","cols","width","map","el","GridListTile","key","name","height","type","dataKey","stroke","tick","content","CryptoNavBar","state","currencies","handleClick","handleCryptoName","Container","marginBottom","spacing","xs","Button","variant","onClick","e","currentTarget","About","position","paddingBottom","href","makeApiCall","axios","process","method","headers","then","res","catch","err","App","historicalData","getApiData","apiCall","setState","Data","date","moment","unix","time","format","price","Math","floor","high","low","console","log","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.693fd128.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport TrendingUpIcon from \"@material-ui/icons/TrendingUp\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nclass Logo extends Component {\r\n  render() {\r\n    return (\r\n      <Grid container justify=\"center\">\r\n        <Grid item>\r\n          <h1 style={{ fontWeight: \"300\", fontSize: \"70px\" }}>\r\n            CryptoIndex <TrendingUpIcon style={{ fontSize: \"70px\" }} />\r\n          </h1>\r\n          <h3 style={{ fontWeight: \"100\", marginTop: \"-10px\" }}>\r\n            Prices of the most popular cryptocurrencies\r\n          </h3>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nconst CustomTooltip = ({ active, payload, label }) =>\r\n  active ? (\r\n    <Box color=\"primary.contrastText\" p={1} borderRadius={8} style={{background: \"rgba(25, 118, 210, 0.5)\"}}>\r\n      <p>{`date: ${label}`}</p>\r\n      <p>{`avg. price: $ ${payload[0].value}`}</p>\r\n    </Box>\r\n  ) : null;\r\n\r\nexport default CustomTooltip;\r\n","import React from \"react\";\r\nexport const CustomizedAxisTick = ({\r\n  payload: { value },\r\n  verticalAnchor,\r\n  visibleTicksCount,\r\n  ...rest\r\n}) => (\r\n  <text {...rest} className=\"bar-chart-tick\" dy={12}>\r\n    {value}\r\n  </text>\r\n);\r\n\r\nexport default CustomizedAxisTick;","import React, { Component } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer\r\n} from \"recharts\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\n\r\nimport CustomTooltip from \"./CustomTooltip\";\r\nimport { GridListTileBar } from \"@material-ui/core\";\r\n\r\nimport CustomizedAxisTick from './CustomizedAxisTick'\r\n\r\nexport default class Graph extends Component {\r\n  render() {\r\n    const graphData = this.props.data;\r\n    return (\r\n      <div>\r\n        <GridList cellHeight={400} cols={1} width=\"100%\">\r\n          {graphData.map(el => (\r\n            <GridListTile key={el.name} width=\"100%\">\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <LineChart data={el}>\r\n                  <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" />\r\n                  <CartesianGrid stroke=\"#ccc\" />\r\n                  <XAxis dataKey=\"date\" tick={<CustomizedAxisTick />}/>\r\n                  <YAxis dataKey=\"price\"/>\r\n                  <Tooltip content={<CustomTooltip />} />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </GridListTile>\r\n          ))}\r\n        </GridList>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\nexport default class CryptoNavBar extends Component {\r\n  state = {\r\n    currencies: [\"BTC\", \"ETH\", \"BCH\", \"BSV\", \"EOS\", \"ETC\"]\r\n  };\r\n\r\n  handleClick = name => {\r\n    this.props.handleCryptoName(name);\r\n    \r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container style={{ marginBottom: \"30px\" }}>\r\n        <Grid container justify=\"center\" spacing={5}>\r\n          {this.state.currencies.map(item => (\r\n            <Grid item xs=\"auto\" key={item}>\r\n              <Button\r\n                name={item}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={e => this.handleClick(e.currentTarget.name)}\r\n              >\r\n                {item}\r\n              </Button>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\nexport default class About extends Component {\r\n  render() {\r\n    return (\r\n        <div style={{ position: \"relative\", paddingBottom: \"10px\"}}>\r\n          <h3 style={{ fontWeight: \"100\" }}>\r\n            Made by <a href=\"https://github.com/SzklaneDomy\">@SzklaneDomy</a>\r\n          </h3>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport const makeApiCall = payload => {\r\n  const apiKey = process.env.REACT_APP_CRYPTO_INDEX\r\n  return axios(\r\n    `https://min-api.cryptocompare.com/data/v2/histoday?api_key=${apiKey}&fsym=${payload}&tsym=USD&limit=30`\r\n  , {\r\n      method: 'GET',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n      data: payload,\r\n  })\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      throw err;\r\n    });\r\n};\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport moment from \"moment\";\n\nimport Logo from \"./components/Logo\";\nimport Graph from \"./components/Graph\";\nimport CryptoNavBar from \"./components/CryptoNavBar\";\nimport About from \"./components/About\";\n\nimport * as apiCall from \"./apiCall\";\n\nclass App extends Component {\n  state = {\n    historicalData: null,\n    graphData: [],\n  };\n\n  getApiData = name => {\n    apiCall\n      .makeApiCall(name)\n      .then(res => {\n        this.setState({\n          historicalData: res.Data.Data\n        });\n      })\n      .then(() => {\n        const data = this.state.historicalData.map(el => {\n          return {\n            date: moment.unix(el.time).format(\"MM/DD/YYYY\"),\n            price: Math.floor(el.high + el.low / 2),\n            name: name,\n          };\n        });\n        this.setState({ graphData: [...this.state.graphData, data] });\n        console.log(this.state);\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Logo />\n        <CryptoNavBar handleCryptoName={this.getApiData} />\n        <About />\n        {this.state.graphData.length ? <Graph data={this.state.graphData} /> : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}